/*****************************************************************************************
 *                                                                                       *
 * OpenSpace                                                                             *
 *                                                                                       *
 * Copyright (c) 2014                                                                    *
 *                                                                                       *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this  *
 * software and associated documentation files (the "Software"), to deal in the Software *
 * without restriction, including without limitation the rights to use, copy, modify,    *
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to    *
 * permit persons to whom the Software is furnished to do so, subject to the following   *
 * conditions:                                                                           *
 *                                                                                       *
 * The above copyright notice and this permission notice shall be included in all copies *
 * or substantial portions of the Software.                                              *
 *                                                                                       *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,   *
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A         *
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT    *
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF  *
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE  *
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                         *
 ****************************************************************************************/

#ifndef POWERSCALING_FS_H_HGLSL
#define POWERSCALING_FS_H_HGLSL

// Observable universe is 10^27m, setting the far value to extremely high, aka 30!! ERMAHGERD!

const float k 				= 10.0;

const float s_far			= 27.0f; //= gl_DepthRange.far;	// 40
const float s_farcutoff		= 12.0f;
const float s_nearcutoff	= 7.00f;
const float s_near			= 1.00f;// gl_DepthRange.near;	// 0.1

vec4 psc_normlization(vec4 invec) {
	
	float xymax = max(invec.x,invec.y);

	if(invec.z > 0.0f || invec.z < 0.0f) {
		return invec / abs(invec.z);
	} else if (xymax != 0.0f) {
		return invec / xymax;
	} else {
		return invec / -.0;
	}
}

float pscDepth(vec4 position) {
	float depth = 0.0f;
	if(position.w <= 0.5) {
		//depth = abs(position.z * pow(10, position.w)) / pow(k,s_far);
		depth = (position.w+log(abs(position.z)))/pow(k, position.w);
	} else if(position.w < 3.0) {
		depth = position.w+log(abs(position.z))/pow(k, position.w);
	} else {
		depth = position.w+log(abs(position.z));
	}
	depth = (position.w+log(abs(position.z)))/pow(k, position.w);
	// depth = (position.w+log(abs(position.z)))/pow(k, position.w);

	// DEBUG
	float depth_orig = depth;
	float x = 0.0f;
	float cutoffs = 0.0;
	float orig_z = position.z;
	
	// calculate a normalized depth [0.0 1.0]
	if((depth > s_near && depth <= s_nearcutoff) || (depth > s_farcutoff && depth < s_far)) {

		// completely linear interpolation [s_near .. depth .. s_far]
		depth = (depth - s_near) / (s_far - s_near);

	} else if(depth > s_nearcutoff && depth < s_farcutoff) {

		// DEBUG
		cutoffs = 1.0;

		// interpolate [10^s_nearcutoff .. 10^depth .. 10^s_farcutoff]
		// calculate between 0..1 where the depth is
		x = (pow(10,depth) - pow(10, s_nearcutoff)) / (pow(10,s_farcutoff) - pow(10, s_nearcutoff));

		// remap the depth to the 0..1 depth buffer
		depth = s_nearcutoff + x * (s_farcutoff - s_nearcutoff);
		depth = (depth - s_near) / (s_far - s_near);

	}
	// return 1.0;
	return depth;
}

#endif