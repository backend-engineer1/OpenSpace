local assetHelper = asset.require('util/asset_helper')
local transforms = asset.require('./transforms')
asset.require("spice/base")
asset.request('./trail')

local textures = asset.syncedResource({
    Name = "Neptune textures",
    Type = "HttpSynchronization",
    Identifier = "neptune_textures",
    Version = 1
})

local Neptune = {
    Identifier = "Neptune",
    Parent = transforms.NeptuneBarycenter.Identifier,
    Transform = {
        Rotation = {
            Type = "SpiceRotation",
            SourceFrame = "IAU_NEPTUNE",
            DestinationFrame = "GALACTIC"
        }
    },
    Renderable = {
        Type = "RenderableGlobe",
        Radii = { 24764000.0, 24764000.0, 24314000.0 },
        SegmentsPerPatch = 64,
        Layers = {
            ColorLayers = {
                {
                    Identifier = "Texture",
                    FilePath = textures .. "/neptune.jpg",
                    Enabled = true
                }
            }
        }
    },
    Tag = { "planet_solarSystem", "planet_giants" },
    GUI = {
        Path = "/Solar System/Planets/Neptune"
    }
}

local NeptuneLabel = {
    Identifier = "NeptuneLabel",
    Parent = Neptune.Identifier,
    -- Transform = {
    --     Translation = {
    --         Type = "SpiceTranslation",
    --         Target = "EARTH",
    --         Observer = "EARTH BARYCENTER"
    --     },
    --     -- Rotation = {
    --     --     Type = "SpiceRotation",
    --     --     SourceFrame = "IAU_MOON",
    --     --     DestinationFrame = "GALACTIC"
    --     -- }
    -- },
    Renderable = {
        Enabled = true,
        Type = "RenderableLabels",
        LabelText = "Neptune",
        FontSize = 100.0,
        LabelSize = 8.8,
        LabelMaxSize = 100.0,
        LabelMinSize = 1.0,
        BlendMode = "Additive",
        TransformationMatrix = {
            1.0, 0.0, 0.0, 0.0,
            0.0, 1.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0
        },
    },
    GUI = {
        Name = "Neptune Label",
        Path = "/Solar System/Planets/Neptune"
    }
}

assetHelper.registerSceneGraphNodesAndExport(asset, { Neptune, NeptuneLabel })
