asset.info = {
    Name = "Predictive Science Inc. Stream nodes Bastille Day",
    Version = "1.0",
    Description = " Stream nodes for the bastille day CME event ",
    Author = "Christian Adamsson, Emilie Ho",
    URL = "https://dx.doi.org/10.3847/1538-4357/aab36d",
    License = ""
}

local assetHelper = asset.require('util/asset_helper')
local transforms = asset.require('./transforms')
local sunTransforms = asset.require('scene/solarsystem/sun/transforms')

openspace.setPropertyValueSingle("Modules.Space.ShowExceptions", false)
--openspace.setPropertyValueSingle("Scene.NeptuneTrail.Renderable.Enabled", false)
--openspace.setPropertyValueSingle("Scene.UranusTrail.Renderable.Enabled", false)
--openspace.setPropertyValueSingle("Scene.SaturnTrail.Renderable.Enabled", false)

local transferFunctions = asset.localResource("transferfunctions")
local streamnodeColorTable = transferFunctions .. "/stream_nodes.txt"
local streamnodeColorTableEarth = transferFunctions .. "/stream_nodes10.txt"
local streamnodeColorTableFlow = transferFunctions .. "/stream_nodesFlow.txt"

local streamnodesDirectory = asset.syncedResource({
    Name = "Bastille Day Stream nodes",
    Type = "HttpSynchronization",
    Identifier = "bastille_day_streamnodes",
    Version = 4
})
local streamnodesBinaries = asset.syncedResource({
    Name = "Bastille day Stream nodes binaries",
    Type = "HttpSynchronization",
    Identifier = "bastille_day_streamnodes_binaries",
    Version = 1
})



local sunRadius = 6.957E8

-- Streamnodes from binaries
local Streamnodes = {
    Identifier = "MAS_MHD_StreamNodes",
    --wrong Parent = transforms.HNMReferenceFrame.Identifier,
    Parent = sunTransforms.SunIAU.Identifier,
    --transforms.asset, referens till suntransforms.solarsystemBarycenter.identifier
    Renderable = {
        Type = "RenderableStreamNodes",
        SourceFolder = streamnodesDirectory,
	BinarySourceFolder = streamnodesBinaries,
        -- StreamsEnabled = false,
        -- LineWidth = 1.0;
        -- AlphaBlendlingEnabled = false,
        InputFileType = "json",
        ColorTablePaths = {
	streamnodeColorTable,
	streamnodeColorTableEarth,
	streamnodeColorTableFlow,
        },
        --ColorTableMinMax = {
         --   { 0, 1000000 },
         --   { 100, 2000 }
        --},
        LoadAtRuntime = true,
        ScaleToMeters = 1.0,
        SecondsBefore = 24*60*60,
        SecondsAfter = 24*60*60,
        --SimulationModel = "mas",
      --  Color = {
       --     Uniform = {0, 0.725, 0.75, 1}
       -- }
    },
    GUI = {
        Path = "/Solar System/Heliosphere",
        Name = "Streamnodes"
    },
    Transform = {
        Scale = {
            Type = "StaticScale",
            Scale = 1
        },
    }
} 

assetHelper.registerSceneGraphNodesAndExport(asset, { Streamnodes })
