asset.require('./base')

local assetHelper = asset.require('util/asset_helper')
local propertyHelper = asset.require('util/property_helper')
local sceneHelper = asset.require('util/scene_helper')

asset.require('util/default_dashboard')

asset.require('scene/solarsystem/sun/magnetogram_textures')
asset.require('scene/solarsystem/sun/streamnodeslegend')
asset.require('scene/solarsystem/sun/streamnodescutplane')
--asset.require('examples/debugcoordinateaxes.asset')
local suncameraState = asset.require('scene/solarsystem/sun/heliosphere/mas/bastille_day/Camerapositions/Earthpos');
local earthcameraState = asset.require('scene/solarsystem/sun/heliosphere/mas/bastille_day/Camerapositions/SunPos');
local sunAsset = asset.require('scene/solarsystem/sun/sun');    --heliosphere/mas/bastille_day/
--local streamnodesAsset = asset.require('scene/solarsystem/sun/heliosphere/mas/bastille_day/streamnodes');
assetHelper.requestAll(asset, 'scene/solarsystem/sun/heliosphere')

-- must be >0
-- the textureIndex variable is used to select a texture from a list of textures 
textureIndex = 2;
Endtime1 = "2000 JUL 14 19:00:00";
Starttimescript = "openspace.time.setTime('2000 JUL 14 08:38:27')";
Endtime2 = "2000 JUL 14 14:00:00";

--script20 = "scene/solarsystem/sun/heliosphere/mas/bastille_day/Camerapositions/Sun";
--script21 = "scene/solarsystem/sun/heliosphere/mas/bastille_day/Camerapositions/Earth";

local Keybindings = {
    {
        Key = "F2",
        Name = "Show Flux Value Legend",
        Command = "openspace.setPropertyValueSingle('ScreenSpace.Legendstreamnodes.Enabled', true);",
		Documentation = "Show the legend image",
        Local = true
    },
    {
        Key = "F3",
        Name = "Show Flux Value Legend",
        Command = "openspace.setPropertyValueSingle('ScreenSpace.Legendstreamnodes.Enabled', false);",
		Documentation = "Hides the legend image",
        Local = true
    },
    {
		Key = "F4",
		Name = "Change to Earth focus",
		Command = 
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Earthfocus.distancePlanetThreshold', 155022826061.149994);"..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Earthfocus.enhanceMethod', 0.000000);"..
			"openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '');"..
			"openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Earth');"..
			"openspace.navigation.loadNavigationState('Earth');"..
			"openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil);",
		Documentation = "Start to focus on Earth",
		Name = "Focus on Earth",
		GuiPath = "/CCMC/Nodes",
		Local = false
	},
	{
		Key = "Shift+r",
		Command =
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Color.colorMode', 1.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.NodeGroup.skippingNodes', 1.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.NodeGroup.amountOfNodes', 1.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Color.fluxColorAlpha', 1.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.NodeGroup.nodeSkip', 1.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.NodeGroup.nodeSize', 2.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.NodeGroup.nodeSizeLargerFlux', 2.00000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.NodeGroup.skippingNodesByFlux', 0.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.NodeGroup.skippingNodesByRadius', 0.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Streams.thresholdFlux', 0.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Streams.filterLower', 0.000000);" ..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Earthfocus.distancePlanetThreshold', 0.000000);"..
			"openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Aim', '');"..
			"openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.Anchor', 'Sun');"..
			"openspace.setPropertyValueSingle('NavigationHandler.OrbitalNavigator.RetargetAnchor', nil);"..
			"openspace.navigation.loadNavigationState('Sun');"..
			"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Streams.filterUpper', 5.000000);",
			--"Todo, fix the last one which is on the z axis"
			--"openspace.setPropertyValueSingle('Scene.MAS_MHD_StreamNodes.Renderable.Streams.limitsZLower', {--358139527168.969971,953488375808.000000});",
			Documentation = "Resets the visualisation of streamnodes",
		    Name = "Reset Streamnodes Vis back",
		    GuiPath = "/CCMC/Nodes",
		    Local = false
	},
	{
	    Key = "Shift+s",
	    Command = 
            "openspace.setPropertyValueSingle('Scene.SunGlare.Renderable.Enabled', true);" ..
            "openspace.setPropertyValueSingle('Scene.Sun.Renderable.Enabled', false);" ..
            "openspace.setPropertyValueSingle('Scene.MAS_MHD_density.Renderable.Enabled', false);" ..
            "openspace.setPropertyValueSingle('Scene.MAS_MHD_Fieldlines.Renderable.Enabled', false);",
	    Documentation = "Resets the subscene for showing the Sun volume rendering + fieldlines",
	    Name = "Reset MHD back",
	    GuiPath = "/CCMC/MHD",
	    Local = false
	},
    {
        Key = "F6",
        Command = propertyHelper.invert('Scene.MAS_MHD_density.Renderable.Enabled'),
        Documentation = "Toggle volume",
        Local = false
    },
    {
	Key = "F7",
		Command = "openspace.scriptScheduler.loadScheduledScript(Endtime2, Starttimescript)",
		Documentation = "Loop time 08:34- 14:00",
		Name = "Loop Nodedata time 08:34 - 14:00",
		GuiPath = "/CCMC/Nodes",
        Local = false
    },
    {
	Key = "F8",
        Command = "openspace.scriptScheduler.loadScheduledScript(Endtime1, Starttimescript)",
        Documentation = "Loop time 08:34- 19:34",
		Name = "Loop Nodedata time 08:34 - 19:34",
		GuiPath = "/CCMC/Nodes",
        Local = false
    },
    {
	Key = "F9",
        Command = "openspace.scriptScheduler.clear()",
        Documentation = "Clear scriptScheduler",
		Name = "Clear loopscripts",
		GuiPath = "/CCMC/Nodes",
        Local = false
    },
    {
	Key = "F10",
		Command = "openspace.time.setTime('2000-JUL-14 10:03:00.00')",
		Documentation = "Restart button for CME",
		Name = "Restart button to start of CME",
		GuiPath = "/CCMC/Nodes",
        Local = false
    },
    {
    	Key = "F11",
	    Command = 
            "openspace.setPropertyValueSingle('Scene.EarthAtmosphere.Renderable.SunFollowingCamera', true);" ..
            "openspace.setPropertyValueSingle('Scene.Moon.Renderable.PerformShading', false);" ..
            "openspace.setPropertyValueSingle('Scene.MoonTrail.Renderable.Appearance.EnableFade', false);" ..
            "openspace.setPropertyValueSingle('Scene.MoonTrail.Renderable.Appearance.Color', {1.000000,1.000000,1.000000});" ..
            "openspace.setPropertyValueSingle('Scene.Earth.Renderable.Layers.NightLayers.Earth_at_Night_2012.Enabled', false);" ..
            "openspace.setPropertyValueSingle('Scene.EarthAtmosphere.Renderable.SunIntensity', 15.000000);",
	    Documentation = "Sun artificially placed, remove shadow on Earth and Moon and show Moon trail",
	    Name = "Earth and moon without shadow",
	    GuiPath = "/CCMC/Nodes",
	    Local = false
    },
    {
        Key = "i",
        Command = [[
            textureList = openspace.globebrowsing.getLayers('Sun', 'ColorLayers');

            if (textureIndex == nil) then 
                textureIndex = 1;
            end; 

            textureIndex = textureIndex + 1
            if (textureIndex >= #textureList) then
                textureIndex = 1;
            end;

            if (textureIndex == 1) then
                openspace.setPropertyValue("Scene.Sun.Renderable.Layers.ColorLayers.*.Enabled", false);
                openspace.setPropertyValueSingle("Scene.Sun.Renderable.Layers.ColorLayers.Texture.Enabled", true);
            else
                openspace.setPropertyValue("Scene.Sun.Renderable.Layers.ColorLayers.*.Enabled", false);

                str = "Scene.Sun.Renderable.Layers.ColorLayers.magnetogram-" .. textureIndex .. ".Enabled";
                openspace.setPropertyValueSingle(str, true);
            end;

        ]],
        Documentation = "Display next sun texture in list of textures",
        Local = false
    }
}

asset.onInitialize(function ()
    openspace.time.setTime("2000 JUL 14 08:33:37.100")

    sceneHelper.bindKeys(Keybindings)

    openspace.setPropertyValueSingle("Scene.Sun.Renderable.Layers.ColorLayers.Texture.Enabled", false)
    local str = "Scene.Sun.Renderable.Layers.ColorLayers.magnetogram-" .. textureIndex .. ".Enabled";
    openspace.setPropertyValueSingle(str, true)
    
    openspace.setPropertyValueSingle('Scene.Sun.Renderable.Enabled', true)
    openspace.setPropertyValueSingle('Scene.SunGlare.Renderable.Enabled', false)
	
	openspace.markInterestingNodes({
        "Earth", "Sun", "Moon"
    });
	
	openspace.navigation.setNavigationState({
        Anchor = sunAsset.Sun.Identifier,
        ReferenceFrame = "Root",
        Position = { -15016171000, 30814181000, -4218126500}
    })
	openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.Anchor", 'MAS_MHD_StreamNodes')
	openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.Aim", '')
	openspace.setPropertyValueSingle("NavigationHandler.OrbitalNavigator.RetargetAnchor", nil)
end)

asset.onDeinitialize(function ()
    sceneHelper.unbindKeys(Keybindings)

    openspace.removeInterestingNodes({
        "Earth", "Sun", "Moon"
    })

    openspace.removeVirtualProperty("*Trail.renderable.Enabled")
end)
