asset.info = {
    Name = "Predictive Science Inc. Stream nodes Bastille Day",
    Version = "1.0",
    Description = " Stream nodes for the bastille day CME event ",
    Author = "CCMC, Christian Adamsson, Emilie Ho",
    URL = "https://dx.doi.org/10.3847/1538-4357/aab36d",
    License = ""
}

local assetHelper = asset.require('util/asset_helper')
local transforms = asset.require('./transforms')
local sunTransforms = asset.require('scene/solarsystem/sun/transforms')

local transferFunctions = asset.localResource("transferfunctions")
local streamnodeColorTable = transferFunctions .. "/stream_nodes.txt"
local streamnodeColorTableCMR = transferFunctions .. "/CMR.txt"
local streamnodeColorTableEarth = transferFunctions .. "/stream_nodes_grey_scale.txt"
local streamnodeColorTableFlow = transferFunctions .. "/stream_nodes_flow.txt"
--local streamnodeColorTableIlluminance = transferFunctions .. "/CMR_illuminance.txt"
--local streamnodeColorTableIlluminance2 = transferFunctions .. "/CMR_illuminance2.txt"

--[[local streamnodesDirectory = asset.syncedResource({
    Name = "Bastille Day Stream nodes",
    Type = "HttpSynchronization",
    Identifier = "bastille_day_streamnodes",
    Version = 10
})--]]
local streamnodesBinaries = asset.syncedResource({
    Name = "Bastille day Stream nodes binaries",
    Type = "HttpSynchronization",
    Identifier = "bastille_day_streamnodes_binaries",
    Version = 1
})

local sunRadius = 6.957E8

-- Streamnodes from binaries
local Streamnodes = {
    Identifier = "MAS_MHD_StreamNodes",
    Parent = transforms.HNMReferenceFrame.Identifier,
    --Parent = sunTransforms.SunIAU.Identifier,
    --Parent = sunTransforms.SolarSystemBarycenter.Identifier,
    --transforms.asset, referens to suntransforms.solarsystemBarycenter.identifier
    Renderable = {
        Type = "RenderableStreamNodes",
        --SourceFolder = streamnodesDirectory,
        BinarySourceFolder = streamnodesBinaries,
        -- StreamsEnabled = false,
        -- LineWidth = 1.0;
        -- AlphaBlendlingEnabled = false,
        -- InputFileType = "json",
        ColorTablePaths = { -- keep order 
        	streamnodeColorTable,
        	streamnodeColorTableCMR,
        	streamnodeColorTableEarth,
        	streamnodeColorTableFlow,
        	--streamnodeColorTableIlluminance,
        	--streamnodeColorTableIlluminance2,
        },
        LoadAtRuntime = true,
        ScaleToMeters = 1.0,
        SecondsBefore = 24*60*60,
        SecondsAfter = 24*60*60,
        --SimulationModel = "mas"
    },
    GUI = {
        Path = "/Solar System/Heliosphere",
        Name = "Streamnodes"
    },
    Transform = {
        Scale = {
            Type = "StaticScale",
            Scale = 1
        },
	Rotation = {
        --This is a rotation matrix to go from Carrington longitude referens frame to HEEQ180
        --which is what the renderables paretn transforms.HNMReferenceFrame.Identifier is
        --refering to. At the referens time, MAS_seq = 0, 2000-07-14T08:33:37.105 the Carrington
        --longitude was 309.3 degrees.
        --Difference from HEEQ => 360-309.3=50.7 
        --(or 0-309.3 = -309.3 However this leads to the same rotation matrix in the end)
        --Since OpenSpace supports HEEQ180 and not HEEQ, 180 was added or subtracted
        -- => a1 = -129.3 and a2 = 230.7
        --Rotation matrix: (cos a, -sin a, 0)(sin a, cos a, 0)(0, 0, 1) leads to the result.
	    Type = "FixedRotation",
            XAxis = {-0.63338087262755016203262119192353, -0.77384020972650618518999944537717, 0.0},
            YAxis = {0.77384020972650618518999944537717, -0.63338087262755016203262119192353, 0.0},
            ZAxis = {0.0, 0.0, 1.0}
        }
    }
} 

assetHelper.registerSceneGraphNodesAndExport(asset, { Streamnodes })
