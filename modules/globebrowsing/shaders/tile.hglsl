/*****************************************************************************************
 *                                                                                       *
 * OpenSpace                                                                             *
 *                                                                                       *
 * Copyright (c) 2014                                                                    *
 *                                                                                       *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this  *
 * software and associated documentation files (the "Software"), to deal in the Software *
 * without restriction, including without limitation the rights to use, copy, modify,    *
 * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to    *
 * permit persons to whom the Software is furnished to do so, subject to the following   *
 * conditions:                                                                           *
 *                                                                                       *
 * The above copyright notice and this permission notice shall be included in all copies *
 * or substantial portions of the Software.                                              *
 *                                                                                       *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,   *
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A         *
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT    *
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF  *
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE  *
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                         *
 ****************************************************************************************/

#ifndef TEXTURETILE_HGLSL
#define TEXTURETILE_HGLSL

vec4 patchBorderOverlay(vec2 uv, vec3 borderColor, float borderSize) {
	vec2 uvOffset = uv - vec2(0.5);
	float thres = 0.5 - borderSize/2;
	bool isBorder = abs(uvOffset.x) > thres || abs(uvOffset.y) > thres;
	vec3 color = isBorder ? borderColor : vec3(0);
	return vec4(color, 0);
}


/////////////////////////////////////////////////////////////////////
//                       Tile Depth Transform                      //
/////////////////////////////////////////////////////////////////////

struct TileDepthTransform {
    float depthScale;
    float depthOffset;
};

float getTransformedTexVal(const TileDepthTransform transform, const float val){
	return transform.depthOffset + transform.depthScale * val;
}

vec4 getTransformedTexVal(const TileDepthTransform transform, const vec4 val){
	return transform.depthOffset + transform.depthScale * val;
}

/////////////////////////////////////////////////////////////////////
//                        Tile UV Transform                        //
/////////////////////////////////////////////////////////////////////

struct TileUvTransform {
    vec2 uvOffset;
    vec2 uvScale;
};


/////////////////////////////////////////////////////////////////////
//                              Tile                               //
/////////////////////////////////////////////////////////////////////
struct Tile {
	sampler2D textureSampler;
	
	TileDepthTransform depthTransform;
	TileUvTransform uvTransform;
};

vec2 compensateSourceTextureSampling(vec2 startOffset, vec2 sizeDiff, const Tile tile, vec2 tileUV){
	ivec2 resolution = textureSize(tile.textureSampler, 0);

	vec2 sourceSize = vec2(resolution) + sizeDiff;
	vec2 currentSize = vec2(resolution);
	vec2 sourceToCurrentSize = currentSize / sourceSize;
	tileUV = sourceToCurrentSize * (tileUV - startOffset / sourceSize);
	return tileUV;
}

vec2 TileUVToTextureSamplePosition(const Tile tile, vec2 tileUV){
	vec2 uv = tile.uvTransform.uvOffset + tile.uvTransform.uvScale * tileUV;
	uv = compensateSourceTextureSampling(vec2(-2), vec2(4), tile, uv);
	return uv;
}

vec4 getTexVal(const Tile tile, vec2 tileUV){
	vec2 samplePosition = TileUVToTextureSamplePosition(tile, tileUV);
	vec4 texVal = texture(tile.textureSampler, samplePosition);
	return texVal;
}



/////////////////////////////////////////////////////////////////////
//                       Multi Level Tile                          //
/////////////////////////////////////////////////////////////////////
struct MultiChunkTile {
	Tile level0;
	Tile level1;
	Tile level2;
};

struct LevelWeights {
	float w1;
	float w2;
	float w3;
};

float getLevelInterpolationParameter(int chunkLevel, float distanceScaleFactor, float distToVertexOnEllipsoid){
	float projectedScaleFactor = distanceScaleFactor / distToVertexOnEllipsoid;
	float desiredLevel = log2(projectedScaleFactor);
	return chunkLevel - desiredLevel;
}

LevelWeights getLevelWeights(float levelInterpolationParameter){
	LevelWeights levelWeights;
	levelWeights.w1 = clamp(1 - levelInterpolationParameter, 0 , 1);
	levelWeights.w2 = (clamp(levelInterpolationParameter, 0 , 1) - clamp(levelInterpolationParameter - 1, 0 , 1));
	levelWeights.w3 = clamp(levelInterpolationParameter - 1, 0 , 1);
	return levelWeights;
}

LevelWeights getDefaultLevelWeights(){
	LevelWeights levelWeights;
	levelWeights.w1 = 1;
	levelWeights.w2 = 0;
	levelWeights.w3 = 0;
	return levelWeights;
}


vec4 getTexVal(const MultiChunkTile multiChunkTile, const LevelWeights w, const vec2 uv){
	return w.w1 * getTexVal(multiChunkTile.level0, uv) + 
		w.w2 * getTexVal(multiChunkTile.level1, uv) + 
		w.w3 * getTexVal(multiChunkTile.level2, uv);
}

// PerLayerSettings
struct PerLayerSettings {
	float opacity;
	float gamma;
	float multiplier;
};

#endif // TEXTURETILE_HGLSL